# Lets edit the data
SchoolDataUSED <- edit(SchoolDataUS) # Why? Something is missing here
# Summary of Data
summary(df)
# check if it has been read corrcitly
library(tidyverse)
library(dplyr)
Datatypelist <- SchoolDataUS %>%
summarise_all(class) %>%
pivot_longer(everything(),
names_to="All_variables",
values_to="Variable_class")
Datatypelist
# Lets edit the data
SchoolDataUSED <- edit(SchoolDataUS) # Why? Something is missing here
# Summary of Data
summary(df)
View(SchoolDataUSED)
View(SchoolDataUSED)
# Filter with the word Science
library(stringr)
SchoolDataUSED<- SchoolDataUS  %>%
filter(str_detect(`TestSubject`, "^Science"))
# Access Column
SchoolDataUSED $TestSubject
# Removes Repeated Rows
SchoolDataUSED2<-SchoolDataUSED %>%
distinct()
library(dplyr)
library (janitor)
# if you Want to remove all capital letter
SchoolDataUSED2 <- SchoolDataUSED2 %>%
#here the ., means all data
clean_names(., case="big_camel")
#
#select only columns we want
SchoolDataUSED3 <- SchoolDataUSED2 %>%
dplyr::select(DistrictCode,
DistrictName,
County,
DistrictOrganizationId,
SchoolName,
GradeLevel,
TestSubject,
CountOfStudentsExpectedToTest,
CountMetStandard)
#top of data
slice_head(SchoolDataUSED3, n=5)
#bottom of data
slice_tail(SchoolDataUSED3,n=5)
# Sum of Students Expected to Test per District
view(SchoolDataUSED3)
str(SchoolDataUSED3)
# Turn Data to numeric
SchoolDataUSED3 <- SchoolDataUSED3 %>%
mutate(
CountOfStudentsExpectedToTest = as.numeric(CountOfStudentsExpectedToTest),
CountMetStandard = as.numeric(CountMetStandard)
)
SchoolDataMerged <- SchoolDataUSED3 %>% # Create a new Excel
group_by(County) %>% # that is joined by ID
summarise(
SchoolsPerCounty = n(),  # counts rows (schools) per County
SumExpected = sum(CountOfStudentsExpectedToTest, na.rm = TRUE), # Sum
SumMet = sum(CountMetStandard, na.rm = TRUE), # Sum
AveragePerCounty = (SumMet/SumExpected)*100 # Percentage
)
# ---- Dealing With The Map ------
library(tmap)
library(tmaptools)
library(sf)
USCountyMap<- st_read(here::here("DATA/Washington_Counties_with_Natural_Shoreline___washsh_area",
"Washington_Counties_with_Natural_Shoreline___washsh_area.shp"))
#plot it using the qtm function
qtm(USCountyMap)
# join attributes to boundries
library(janitor)
SchoolDataMerged <- SchoolDataMerged %>%
mutate(County = toupper(County))
SchoolDataMerged <- SchoolDataMerged %>%
rename(CountySchool=County)
library(dplyr)
# Join Left
CountyDataMap <- USCountyMap %>%
left_join(SchoolDataMerged,
by = c("county" = "CountySchool"))
View(USCountyMap)
# Join Left
CountyDataMap <- USCountyMap %>%
left_join(SchoolDataMerged,
by = c("COUNTY" = "CountySchool"))
# Plot
tmap_mode("plot")
qtm(CountyDataMap,
fill = "AveragePerCounty")
KingAvg <- CountyDataMap %>%
filter(county == "KING") %>%
pull(AveragePerCounty)
KingAvg <- CountyDataMap %>%
filter(COUNTY == "KING") %>%
pull(AveragePerCounty)
CountyDataMap <- CountyDataMap %>%
mutate(
ComparedToKing = ifelse(
AveragePerCounty >= KingAvg,
"Above King Average",
"Below King Average"
)
)
tmap_mode("plot")
qtm(CountyDataMap,
fill = "ComparedToKing",
fill.palette = c("blue", "pink"),
title = "Counties Above or Below King County Average")
# Read CSV file
report<- read.csv(here::here("DATA/2018-19_School_Year.csv",
sep = ",",
# Download Files + Unzip
# Set Directory
setwd()
library(tidyverse)
library(here)
library(sf)
library(janitor)
library(tmap)
library(readr)
library(dplyr)
# Read CSV file
SchoolDataUS<- read.csv(here::here("DATA/2018-19_School_Year.csv",
header = TRUE,
sep = ",",
encoding = "latin1"))
setwd("C:/Users/emily/OneDrive/Desktop/CASA_MSc_Desktop/MSc_Term01/0005_GIS/WK02 - HW")
library(tidyverse)
library(here)
library(sf)
library(janitor)
library(tmap)
library(readr)
library(dplyr)
# Read CSV file
SchoolDataUS<- read.csv(here::here("DATA/2018-19_School_Year.csv",
header = TRUE,
sep = ",",
encoding = "latin1"))
setwd("C:/Users/emily/OneDrive/Desktop/CASA_MSc_Desktop/MSc_Term01/0005_GIS/WK02 - HW/DATA")
# Read CSV file
SchoolDataUS<- read.csv(here::here("DATA/2018-19_School_Year.csv",
header = TRUE,
sep = ",",
encoding = "latin1"))
setwd("C:/Users/emily/OneDrive/Desktop/CASA_MSc_Desktop/MSc_Term01/0005_GIS/WK02 - HW")
# Read CSV file
SchoolDataUS<- read.csv(here::here("DATA","2018-19_School_Year.csv"),
header = TRUE,
sep = ",",
encoding = "latin1")
# Read CSV file
SchoolDataUS<- read.csv(here::here("DATA","2018-19_School_Year.csv"),
header = TRUE,
sep = ",",
encoding = "latin1")
# Check Class
class(SchoolDataUS)
# Check Class
class(SchoolDataUS)
Datatypelist <- SchoolDataUS %>%
summarise_all(class) %>%
pivot_longer(everything(),
names_to="All_variables",
values_to="Variable_class")
Datatypelist
library(tidyverse)
library(here)
library(sf)
library(janitor)
library(readr)
library(dplyr)
library(stringr)
library(tmap)
library(tmaptools)
# Read CSV file
report<- read.csv(here::here("DATA","2018-19_School_Year.csv"),
header = TRUE,
sep = ",",
encoding = "latin1")
View(SchoolDataUSED)
library(tidyverse)
library(here)
library(sf)
library(janitor)
library(readr)
library(dplyr)
library(stringr)
library(tmap)
library(tmaptools)
# Read CSV file
report<- read.csv(here::here("DATA","2018-19_School_Year.csv"),
header = TRUE,
sep = ",",
encoding = "latin1")
# Reading Map Shp
shp<- st_read(here::here("DATA","Washington_Counties_with_Natural_Shoreline___washsh_area",
"Washington_Counties_with_Natural_Shoreline___washsh_area.shp"))
View(shp)
View(shp)
# Check Class
class(report)
Datatypelist <- report %>%
summarise_all(class) %>%
pivot_longer(everything(),
names_to="All_variables",
values_to="Variable_class")
View(report)
View(report)
# Clean Data Frame Of CapsLock and make is with underscore
report <- report %>%
janitor::clean_names()
# Make New DataFrame that will only contain
# these:
county_only <- report %>%
clean_names() %>%
select(county, organization_level, test_subject, count_met_standard,
count_of_students_expected_to_test, grade_level)%>%
# the != means don't select this, but select everything else
# i could also filter on where
filter(county != "Multiple")%>%
filter(organization_level == "School")%>%
filter(test_subject == "Science")%>%
filter(grade_level=="All Grades")%>%
group_by(county)%>%
# we need to remove NAs - note we can use this function or do it within the summarise below with the argument na.rm=T they do the same thing!
na.omit()%>%
# na.rm = T means remove missing values from the data
# could also use na.omit or filter greater than 0
summarise(total_county_met_standard=sum(count_met_standard),
total_county_to_test=sum(count_of_students_expected_to_test))%>%
mutate(percent_met_per_county=(total_county_met_standard/total_county_to_test)*100)
# Make New DataFrame that will only contain
# these:
county_only <- report %>%
clean_names() %>%
select(county, organization_level, test_subject, count_met_standard,
count_of_students_expected_to_test, grade_level)%>%
# the != means don't select this, but select everything else
# i could also filter on where
filter(county != "Multiple")%>%
filter(organization_level == "School")%>%
filter(test_subject == "Science")%>%
filter(grade_level=="All Grades")%>%
group_by(county)%>%
# we need to remove NAs - note we can use this function or do it within the summarise below with the argument na.rm=T they do the same thing!
na.omit()%>%
# na.rm = T means remove missing values from the data
# could also use na.omit or filter greater than 0
summarise(total_county_met_standard=sum(count_met_standard),
total_county_to_test=sum(count_of_students_expected_to_test))%>%
mutate(percent_met_per_county=(total_county_met_standard/total_county_to_test)*100)
Datatypelist <- report %>%
summarise_all(class) %>%
pivot_longer(everything(),
names_to="All_variables",
values_to="Variable_class")
Datatypelist
# Make New DataFrame that will only contain
# these:
county_only <- report %>%
clean_names() %>%
select(county, organization_level, test_subject, count_met_standard,
count_of_students_expected_to_test, grade_level)%>%
# the != means don't select this, but select everything else
# i could also filter on where
filter(county != "Multiple")%>%
filter(organization_level == "School")%>%
filter(test_subject == "Science")%>%
filter(grade_level=="All Grades")%>%
group_by(county)%>%
# we need to remove NAs - note we can use this function or do it within the summarise below with the argument na.rm=T they do the same thing!
na.omit()%>%
# na.rm = T means remove missing values from the data
# could also use na.omit or filter greater than 0
summarise(total_county_met_standard=sum(count_met_standard),
total_county_to_test=sum(count_of_students_expected_to_test))%>%
mutate(percent_met_per_county=(total_county_met_standard/total_county_to_test)*100)
# Make New DataFrame that will only contain
# these:
county_only <- report %>%
clean_names() %>%
select(county, organization_level, test_subject, count_met_standard,
count_of_students_expected_to_test, grade_level)%>%
# the != means don't select this, but select everything else
# i could also filter on where
filter(county != "Multiple")%>%
filter(organization_level == "School")%>%
filter(test_subject == "Science")%>%
filter(grade_level=="All Grades")%>%
group_by(county)%>%
# we need to remove NAs - note we can use this function or do it within the summarise below with the argument na.rm=T they do the same thing!
na.omit()%>%
# na.rm = T means remove missing values from the data
# could also use na.omit or filter greater than 0
summarise(total_county_met_standard=sum(count_met_standard),
total_county_to_test=sum(count_of_students_expected_to_test))%>%
mutate(percent_met_per_county=as.numeric(total_county_met_standard/total_county_to_test)*100)
# Make New DataFrame that will only contain
# these:
county_only <- report %>%
clean_names() %>%
select(county, organization_level, test_subject, count_met_standard,
count_of_students_expected_to_test, grade_level)%>%
# the != means don't select this, but select everything else
# i could also filter on where
filter(county != "Multiple")%>%
filter(organization_level == "School")%>%
filter(test_subject == "Science")%>%
filter(grade_level=="All Grades")%>%
group_by(county)%>%
# we need to remove NAs - note we can use this function or do it within the summarise below with the argument na.rm=T they do the same thing!
na.omit()%>%
# na.rm = T means remove missing values from the data
# could also use na.omit or filter greater than 0
summarise(total_county_met_standard=sum(count_met_standard),
total_county_to_test=sum(count_of_students_expected_to_test))%>%
mutate(percent_met_per_county=as.numeric(total_county_met_standard/total_county_to_test)*100)
# Make New DataFrame that will only contain
# these:
county_only <- report %>%
clean_names() %>%
select(county, organization_level, test_subject, count_met_standard,
count_of_students_expected_to_test, grade_level)%>%
# the != means don't select this, but select everything else
# i could also filter on where
filter(county != "Multiple")%>%
filter(organization_level == "School")%>%
filter(test_subject == "Science")%>%
filter(grade_level=="All Grades")%>%
group_by(county)%>%
# we need to remove NAs - note we can use this function or do it within the summarise below with the argument na.rm=T they do the same thing!
na.omit()%>%
# na.rm = T means remove missing values from the data
# could also use na.omit or filter greater than 0
summarise(total_county_met_standard=sum(count_met_standard),
total_county_to_test=sum(count_of_students_expected_to_test))%>%
mutate(percent_met_per_county=as.numeric(total_county_met_standard/total_county_to_test)*100)
library(tidyverse)
library(here)
library(sf)
library(janitor)
library(readr)
library(dplyr)
library(stringr)
library(tmap)
library(tmaptools)
# Read CSV file
report<- read.csv(here::here("DATA","2018-19_School_Year.csv"),
header = TRUE,
sep = ",",
encoding = "latin1")
# Reading Map Shp
shp<- st_read(here::here("DATA","Washington_Counties_with_Natural_Shoreline___washsh_area",
"Washington_Counties_with_Natural_Shoreline___washsh_area.shp"))
# Check Class
class(report)
# Check Class
class(report)
Datatypelist <- report %>%
summarise_all(class) %>%
pivot_longer(everything(),
names_to="All_variables",
values_to="Variable_class")
Datatypelist
# Clean Data Frame Of CapsLock and make is with underscore
report <- report %>%
janitor::clean_names()
# Make New DataFrame that will only contain
# these:
county_only <- report %>%
clean_names() %>%
select(county, organization_level, test_subject, count_met_standard,
count_of_students_expected_to_test, grade_level)%>%
# the != means don't select this, but select everything else
# i could also filter on where
filter(county != "Multiple")%>%
filter(organization_level == "School")%>%
filter(test_subject == "Science")%>%
filter(grade_level=="All Grades")%>%
group_by(county)%>%
# we need to remove NAs - note we can use this function or do it within the summarise below with the argument na.rm=T they do the same thing!
na.omit()%>%
# na.rm = T means remove missing values from the data
# could also use na.omit or filter greater than 0
# Mutate is to numeric
mutate(
count_met_standard = as.numeric(count_met_standard),
count_of_students_expected_to_test = as.numeric(count_of_students_expected_to_test)
) %>%
# Group by and summrize
group_by(county) %>%
summarise(
total_county_met_standard = sum(count_met_standard, na.rm = TRUE),
total_county_to_test = sum(count_of_students_expected_to_test, na.rm = TRUE)
) %>%
mutate(percent_met_per_county = (total_county_met_standard / total_county_to_test) * 100)
View(county_only)
View(county_only)
# Top 5 of the Data
county_only%>%
colnames()%>%
# just look at the head, top5
head()
library(tidyverse)
library(here)
library(sf)
library(janitor)
library(readr)
library(dplyr)
library(stringr)
library(tmap)
library(tmaptools)
# Read CSV file
report<- read.csv(here::here("DATA","2018-19_School_Year.csv"),
header = TRUE,
sep = ",",
encoding = "latin1")
# Reading Map Shp
shape<- st_read(here::here("DATA","Washington_Counties_with_Natural_Shoreline___washsh_area",
"Washington_Counties_with_Natural_Shoreline___washsh_area.shp"))
# Check Class
class(report)
# Check Class
class(report)
Datatypelist <- report %>%
summarise_all(class) %>%
pivot_longer(everything(),
names_to="All_variables",
values_to="Variable_class")
Datatypelist
# Clean Data Frame Of CapsLock and make is with underscore
report <- report %>%
janitor::clean_names()
# Make New DataFrame that will only contain
# these:
county_only <- report %>%
clean_names() %>%
select(county, organization_level, test_subject, count_met_standard,
count_of_students_expected_to_test, grade_level)%>%
# the != means don't select this, but select everything else
# i could also filter on where
filter(county != "Multiple")%>%
filter(organization_level == "School")%>%
filter(test_subject == "Science")%>%
filter(grade_level=="All Grades")%>%
group_by(county)%>%
# we need to remove NAs - note we can use this function or do it within the summarise below with the argument na.rm=T they do the same thing!
na.omit()%>%
# na.rm = T means remove missing values from the data
# could also use na.omit or filter greater than 0
# Mutate is to numeric
mutate(
count_met_standard = as.numeric(count_met_standard),
count_of_students_expected_to_test = as.numeric(count_of_students_expected_to_test)
) %>%
# Group by and summrize
group_by(county) %>%
summarise(
total_county_met_standard = sum(count_met_standard, na.rm = TRUE),
total_county_to_test = sum(count_of_students_expected_to_test, na.rm = TRUE)
) %>%
# Calculate Percentage of who met / numbers that where tested
mutate(percent_met_per_county = (total_county_met_standard / total_county_to_test) * 100)
# Top 5 of the Data
county_only%>%
colnames()%>%
# just look at the head, top5
head()
state_average <- county_only%>%
summarise(state_average= mean(percent_met_per_county))%>%
pull()
# or use $ to acess value of columns
state_average2 <- mean(county_only$percent_met_per_county)
#or using summerize for state average
state_average3 <- county_only%>%
select(percent_met_per_county)%>%
summarise(state_average=mean(percent_met_per_county))%>%
pull()
county_only_above_below_state <- county_only %>%
mutate(difference_to_state=(percent_met_per_county-state_average))%>%
mutate(across(difference_to_state, ~ round(.x, 0)))%>%
mutate(above_below = case_when(difference_to_state<0 ~ "below",
difference_to_state>0 ~ "above",
difference_to_state==0 ~ "equal"
))
#Join to our spatial data....
joined_data <- shape %>%
clean_names(.) %>%
left_join(.,
county_only_above_below_state,
by = c("countylabe" = "county"))
bbox_county <- joined_data %>%
st_bbox(.) %>%
tmaptools::read_osm(., type = "osm", zoom = NULL)
tm_shape(bbox_county)+
tm_rgb()+
tm_shape(joined_data) +
tm_polygons(fill="above_below",
fill.scale = tm_scale_categorical(
values="brewer.bu_pu"),
fill_alpha=0.5)+
tm_compass(position = c("left", "bottom"),type = "arrow")+
tm_scalebar(position = c("left", "bottom")) +
tm_title_out("Counties above or below state avearge for science in all grades",
position=tm_pos_out("center", "top"))
